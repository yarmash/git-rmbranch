#!/usr/bin/env python3

import argparse
import re
import subprocess
import sys


def get_default_branch() -> str:
    """Get the repo's "default" branch from the config. If not set, then use either master or main"""

    result = subprocess.run(['git', 'config', '--get', 'git-tools.defaultBranch'], capture_output=True, text=True)
    if result.returncode == 0:
        return result.stdout.rstrip()

    for branch_name in ('master', 'main'):
        if subprocess.run(['git', 'show-ref', '--verify', '--quiet', f'refs/heads/{branch_name}']).returncode == 0:
            return branch_name

    raise RuntimeError('Unable to determine the default branch for the repo')


def get_branch_upstream(branch_name) -> dict:
    """
    Get upstream information for a local branch from config.
    A branch has upstream if `branch.<name>.remote` and `branch.<name>.merge` options are set.
    """
    result = subprocess.run(
        ['git', 'config', '--get-regexp', fr'^branch\.{re.escape(branch_name)}\.'],
        capture_output=True, text=True)

    if result.returncode != 0:
        return {}

    branch_config = {}
    offset = len(f'branch.{branch_name}.')

    for line in result.stdout.splitlines():
        key, value = line.split(maxsplit=1)
        key = key[offset:]
        assert key not in branch_config, f"Multiple values for 'branch.{branch_name}.{key}' option"
        branch_config[key] = value

    if 'remote' in branch_config and 'merge' in branch_config:
        return {'remote': branch_config['remote'], 'merge': branch_config['merge']}
    return {}


def get_current_branch() -> str:
    """Get the current branch name"""

    return subprocess.run(
        ['git', 'branch', '--show-current'],
        capture_output=True, check=True, text=True
    ).stdout.rstrip()


def parse_args():
    parser = argparse.ArgumentParser(description='Delete a Git branch locally and remotely.')
    parser.add_argument('branch_name', nargs='?',
                        help='The branch name. In case no argument is provided, the current branch will be used')
    return parser.parse_args()


def main():
    """Delete a git branch locally and remotely."""
    args = parse_args()

    current_branch = get_current_branch()
    branch_name = current_branch if args.branch_name is None else args.branch_name
    default_branch = get_default_branch()

    if branch_name == default_branch:
        print(f"Refusing to delete the default branch '{branch_name}'")
        return 1

    if branch_name == current_branch:
        new_branch = input(f'Enter a branch name to checkout ({default_branch}): ').strip()
        if not new_branch:
            new_branch = default_branch
        result = subprocess.run(['git', 'checkout', new_branch], stdout=subprocess.DEVNULL)
        if result.returncode != 0:
            return result.returncode

    upstream = get_branch_upstream(branch_name)

    result = subprocess.run(['git', 'branch', '-D', branch_name],
                            capture_output=True, text=True)
    if result.returncode == 0:
        sha = re.search(r'\(was (\w+)\)', result.stdout)[1]
        print(result.stdout.rstrip(), f"To restore, run 'git branch {branch_name} {sha}'.")
    else:
        print(result.stderr, end='')

    if upstream:
        remote_name, refspec = upstream['remote'], upstream['merge']
    else:
        print(f"No upstream configured for the branch '{branch_name}'.")
        upstream = input(f'Enter remote branch to delete (origin/{branch_name}): ').strip()
        remote_name, refspec = upstream.split('/', 1) if upstream else ('origin', branch_name)

    print(f"Deleting '{refspec}' from '{remote_name}'..")

    # this command also removes the local remote-tracking branch
    try:
        cmd = ['git', 'push', remote_name, '--delete', refspec]
        return subprocess.run(cmd, timeout=30).returncode
    except subprocess.TimeoutExpired:
        print(f'Timeout expired.\nTo retry, run: `{" ".join(cmd)}`')


if __name__ == '__main__':
    sys.exit(main())
